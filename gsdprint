#!/usr/local/bin/perl

# This is a reimplementation of the gsdprint command
# using Perl rather than C or Fortran.
# The C version forms part of the GSD C library distribution.
# This version is much more compact.

# History:
#  April 1996 (TIMJ)
#    Original version
#  May 2000 (TIMJ)
#    Use modern perl and the new OO interfacce

# Load in the GSD module
use GSD qw//;
use Term::ReadLine;
use Getopt::Long;
use Pod::Usage;

use strict;

# Version number
my $VERSION = '1.01';


# Read the options
my $man = 0;
my $help = 0;
my $version = 0;
my $printdata = 0;
my $noread = 0;
my $noarray = 0;

# Parse options
GetOptions('help|?' => \$help, man => \$man, noread => \$noread, 
	   'data' => \$printdata, 'version' => \$version,
	   'noarray' => \$noarray) 
  or pod2usage(2);

pod2usage(1) if $help;
pod2usage(-verbose => 2) if $man;


# Version
($version) && do {
    print "JCMT GSD file lister ($0) version $VERSION\n";
    print "Use the -h option for more information\n";
    exit;
};


# Read the argument if there is one

my $filename;
if (@ARGV) {
  $filename = shift;
} else {
  my $term = new Term::ReadLine 'gsdprint' unless ($noread);
  my $prompt = "Which GSD file to list : ";
  ($noread) && do {print $prompt; chomp($filename = <>)} ||
    ($filename = $term->readline($prompt));
}

# Explicitly test for the existence of the filename
# before trying to open it. This is not really necessary apart
# from allowing us to distinguish error states 

die "$!: $filename does not exist\n" 
  unless ((-e "$filename") ||
	  (-e "$filename.dat") ||
	  (-e "$filename.gsd") || 
	  (-e $ENV{'DATADIR'}."/$filename") ||
	  (-e $ENV{'DATADIR'}."/$filename.dat") ||
	  (-e $ENV{'DATADIR'}."/$filename.gsd"));


# Open the GSD file
my $gsd = new GSD($filename);

die "Problem opening file. $filename may not be a GSD file\n"
  unless defined $gsd;


# Print an informative header
print "-"x78,"\n";
print " G S D    P R I N T\n";
print "-"x78,"\n";
print "\n";
print  " Filename        : $filename\n";
printf " GSD version     : %5.3f\n", $gsd->version;
print  " Label           : ", $gsd->label, "\n";
print  " Number of items : ", $gsd->nitems, "\n";
print  "\n\n\n";
print  "Name\t\tUnit\t\tType\tArr?\tValue\n";
print  "-"x78,"\n";

for my $i (1.. $gsd->nitems) {

  my ($name, $unit, $type, $array) = $gsd->Item($i);
  next if ($array && $noarray);

  print "-"x78,"\n" if ($array);    
  printf "%-16s%-16s$type\t$array\t", $name, $unit;

  if ($array) {

    # Find out how big it is
    my ($dimnm, $dimunt, $dimvals, $size) = $gsd->InqSize($i);
    print "Size = $size\n";
	
    # Now get the data
    my @values = $gsd->GetByNum($i);

    # Write the array definition - looping over each dimension
    for my $j (0..$#$dimvals) {
      printf("  > %s: %d\t%s\n", $dimnm->[$j], $dimvals->[$j], $dimunt->[$j]);
    }

    # Write the data - skipping if this is the last item
    # unless $printdata is true
    if (($i != $gsd->nitems) || $printdata)  {
      print "  Data:\n";

      # Print the data in blocks of 4
      for my $j (0..$#values) {
	if ($type =~ /C/i) {
	  printf "%20s ",$values[$j];
	} else {
	  printf "%15g",$values[$j];
	}
	print "\n" unless ((1+$j)%4);
      }
      print "\n" if (scalar(@values)%4);
    }


    } else {

      my $newdata = $gsd->GetByNum($i);
      print "$newdata\n";
    }

}

print "-"x78,"\n";

exit;

__END__

=head1 NAME

gsdprint - Print the contents of a GSD file to standard output

=head1 SYNOPSIS

  gsdprint obs_das_0141.dat
  gsdprint -nodata obs_das_0141
  gsdprint test.gsd

  gsdprint

  gsdprint -v
  gsdprint -man

=head1 DESCRIPTION

This command prints the contents of the GSD file to the screen
with some formatting. By default the data component C<C13DAT>
is not printed since this can be very large (the B<-data> option
will print the data as well as the header).

A prompt will be issued if no filename is given.

=head1 OPTIONS

=over 4

=item B<-help>

Print a brief help message and exits.

=item B<-man>

Prints the manual page and exits.

=item B<-data>

Print the C<C13DAT> field as well as the header fields. 
In reality without this option the program  simply misses off the 
last GSD item assuming that it is the main data array.

=item B<-noarray>

Only list scalar items.

=item B<-noread>

Turn off readline support. Sometimes this is necessary 
if the command is run from a script or web page. Readline
support is only required when the user is prompted for input
(ie no filename supplied at the command-line). 

=back

=head1 AUTHOR

Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>

Copyright (C) 1996-2000 Tim Jenness and the UK Particle Physics and
Astronomy Research Council. All Rights Reserved.

=cut
